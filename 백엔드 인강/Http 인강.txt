Http 인강

인터넷 네트워크 정리
- 복잡한 인터넷망을 이용해서 정보를 보낼때 인터넷 프로토콜 (IP)가 필요
- IP프로토콜만으로는 신뢰하기 어려우며, port개념이 없음, 순서도 일정하지 않음
 이러한 문제점을 TCP가 해결해 준다
-UDP는 IP와 거의 동일 하지만 port 정보가 추가됨
-port는 같은 IP안에서 통시할 애플리케이션을 구분하기 위해 사용
 IP가 아파트(하나의 pc) 이면 port는 동,호수로 이해
-IP는 변하기 쉽고 외우기는 어려운 단점 
 IP를 도메인명으로 저장함 (도메인 명을 IP주소로 변환)


웹 브라우저 요청 흐름
1. 요청 주소에 대해서 DNS를 조회한다 IP랑 port번호 알려줌  (HTTP PORT 생략)
2. HTTP 요청 메서지 생성 (GET, host등..)
	-웹 브라우저가 HTTP 메시지 생성
	-SOCKET 라이브러리를 통해 전달 (TCP/IP 연결  - 데이터 전달)
	-TCP/IP 패킷(출발 ip, port/목적지ip,port/전송데이터 /HTTP 메시지 포함 등..) 생성, 
3. 요청받은 서버에서 요청 패킷 받은 후 HTTP메세지를 확인후 데이터를 찾아서 HTTP응답 메세지를 보냄
4. 응답을 받은 클라이언트는 응답 메세지를 확인하면 요청한 데이터 결과를 받는다
	-클라이언트(웹브라우저)는 받은 데이터(html)를 랜더링 한다

클라이언트 서버구조
-클라이언트는 서버에 요청을 보내고 응답을 기다림
-서버가 요청에 대한 결과를 만들어서 응답
-비지니스 로직이나 데이터는 모두 서버에 밀어넣고 클라이언트는 ui사용성에만 신경씀
 -> 각각 독립적으로 진화


무상태 프로토콜(스테이스리스 Stateless)
-서버가 클라이언트의 상태를 보존x
-장점 : 서버 확장성 높음(스케일 아웃 
-단점 : 클라이언트가 추가 데이터 전송
Stateful / Stateless 차이
-Stateful(상태유지) : 중간에 다른 점원으로 바뀌면 안됨(정보를 한점원에게 다 저장되기 때문)
-Stateless(무상태) : 중간에 다른 점원으로 바뀌어도 됨 (클라이언트가 모든 정보를 다 주면서 전송하기 떄문)


http의 비 연결성 
-HTTP 지속연결(Persistent Connections : 요청,응답이 다 완료됨 연결을 종료하는 구조


HTTP API
-리소스와 행위를 분리 -> 가장 중요한 것은 리소스를 식별하는 것
-URI는 리소스만 식별 한다
-예) 리소스 : 회원 / 행위  조회, 등록, 삭제, 변경
-리소스는 명사, 행위는 동사
-행위( HTTP 메서드) 구분 -> GET, POST


HTTP 메서드 GET/POST 외
-post는 모든 것을 할 수 있다 메세지를 내부에 담아서 보내는 모든 것을 할 수 있지만
 정보를 조회 할 떄는 get을 쓰는 것이 유리
 정보를 변경, 프로세스를 진행등은 pos사용

GET 
-리소스 조회
-서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리스트링)를 통해서 전달
-메세지 바디를 사용해서 데이터를 전달할 수 있지만 권장 하지 않음

POST
-요청 데이터 처리
-메세지 바디를 통해 서버로 요청 데이터 전달
-서버는 요청 데이터를 처리 (메세지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다
-주로 전달된 데이터로 신규리소스 등록, 프로세스 처리에 사용
	-html 양식에 입력 된 필드와 같은 데이터블록을 데이터처리 프로세스에 제공
	-게시판, 뉴스그룹,블로그 등 유사한 기사 그룹에 메시지 게시
	-서버가 아직 식별하지 않은 새 리소스 생성
	-기존 자원에 데이터 추가
-이 리소스 URL에 POST요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 함
-정리하면
	1. 새 리로스 생성(등록)
	2. 요청 데이터 처리 (단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우)
	3. 다른 메서드로 처리하기 애매한 경우

PUT
-리소스를 대체 -> 리소스가 있으면 대체 없으면 생성 -> 쉽게 말해 완전히 덮어 버린다 즉,기본의 데이터를 완전히 삭제하고 PUT으로 보낸 데이터가 저장이 된다
-클라리언트가 리소스를 식별 -> 클라이언트가 리소스 위치를 알고 URI를 지정
 POST는 데이터를 등록할때 데이터만 서버에 주지만 PUT는 데이터의 정보와 함께 위치도 지정해 준다


PATCH
-리소스 부분 변경

DELETE
-리소스 제거


HTTP 메서드의 속성
-Safe(안전): 변경이 되는 것은 안전하지 않다. get은 안전하지만 post처럼 변경이 일어나는 것은 안전하지 않다
-멱등(Idempotent) : 한번 호출하던 100번 호출하던 결과가 항상 같아야 한다
	-GET, PUT, DELETE는 멱등 메서드로 여러번 조회한다고 결과는 달라지지 않는다
	-POST는 멱등이 아니다 예를 들어 두 번 호출하면 같은 결제가 중복해서 발생
	-자동 복구 메커니즘	
	-서버가 정상응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가 -> 판단 근거
	-멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지 고려하지 않는다
-캐시가능(Cacheable)
	-응답결과를 캐시에 사용할 수 있는가
	-캐시 : 로컬 pc 웹브라우저에 데이터 정보를 저장
	-GET, HEAD는 캐시 가능 / POST, PATCH는 불가능



클라이언트에서 서버로 데이터 전송
1. 쿼리 파라미터를 통한 데이터 전송 방식
	-GET 
	-?를 사용해 키벨류형식 (쿼리 스트링)
	-주로 정렬 필터(검색어)
2. 메시지 바디를 통한 데이터 전송
	-POST, PUT, PATCH
	-회원가입, 상품주문, 리소스 등록/변경

정적 데이터 조회
	-이미지, 정적 덱스트 문서
	-조회는 GET 사용
	-쿼리 파라미터 미사용
	-정적데이터는 일반적으로 쿼리 파라미터 없이 리소스 결로 단순하게 조회 가능

동적 데이터 조회
	-퀴리 파라미터 사용
	-주로 검색, 게시판 목록에서 정렬 필터(검색어)
	-조회 조건을 줄여주는 필터, 조회결과를 정렬하는 정렬조건에 주로 사용
	-조회는 GET 사용
	-GET은 쿼리 파라미터 사용해서 데이터 전달

HTML Form 데이터 전송
	1. POST 전송 -> 저장
		-submit시 POST전송
		-Content-Type: application/x-www-form-urlencoded 사용
		-form의 내용을 메시지 바디를 통해서 전송(key=value, 쿼리 파라미터 형식)
		-전송 데이터를 url encoding 처리
	2. GET 전송 -> 조회 : 리소스 변경이 발생하는 곳에 사용하면 안됨
	3. multipart/form-data : 다른 종류의 여러 파일과 폼의 내용을 함께 전송 가능 ( 글+이미지)
	

HTTP APl 데이터 전송 
	-클라이언트에서 서버로 바로 데이터를 전송해야 할때
	-서버 to 서버 : 백엔드 시스템 통신
	-html 에서 Form 전송 대신 자바 스크립트를 통한 통신에 사용(AJAX)
	-POST, PUT, PATCH: 메시지 바디를 통해 데이터 전송
	-GET: 조회, 쿼리 파라미터로 데이터 전달
	-Content-Type: application/json을 주로 사용 (사실상 표준)




HTTP API 설계 예시
0. 문서 
	-단일 개념 
	-파일 하나, 객체 인스턴스, 데이터베이스 row ..
	-예) /members/100, /files/star.jpg

1. POST 기반 등록
	-클라이언트는 등록될 리소스의 URI를 모른다
	-서버가 새로 등록될 리소스URI를 생성해준디
	-컬렉션(Collection) : 서버가 관리하는 리소스 디렉토리, 서버가 리소스의 URI를 생성하고 관리
	-예) /members

2. PUT 기반 등록
	-클라이언트가 리소스 URI를 알고 있어야 한다
	-클라이언트가 직접 리소스의 URI를 지정한다
	-스토어(Store) : 클라이언트가 관리하는 리소스 저장소, 클라이언트가 리소스의 URI를 알고 있다
	-예로 게시판를 설계 할때
	-예) /files

3. HTML FORM 사용
	-GET, POST만 지원
   	-컨트롤 URI 
		-GET, POST만 지원하므로 제약이 있음 -> 동사로 된 리소스 경로 사용
		-POST의 /new, /edit, /delete가 컨트롤 URI
		-문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
		-예) /members/{id}/delete
	




































